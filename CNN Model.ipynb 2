{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "71e4fcf2-da01-4b4e-bc70-8579b5e8436a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "file_path = 'requirment.csv'\n",
    "if os.path.exists(file_path):\n",
    "    df = pd.read_csv(file_path, encoding='latin1')\n",
    "else:\n",
    "    print(f\"Error: The file {file_path} does not exist.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "44bd87c5-531a-4de1-b40b-44006dac73e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.11/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1045/1045\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 16ms/step\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "          feature       0.99      1.00      0.99      8359\n",
      "  user_experience       0.97      0.98      0.98      8359\n",
      "            issue       0.98      0.98      0.98      8359\n",
      "other_information       0.98      0.96      0.97      8359\n",
      "\n",
      "         accuracy                           0.98     33436\n",
      "        macro avg       0.98      0.98      0.98     33436\n",
      "     weighted avg       0.98      0.98      0.98     33436\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# CNN Model Oversampling\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.model_selection import KFold\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, Flatten, Dropout, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "import shap\n",
    "\n",
    "# 1. Load and preprocess the dataset\n",
    "df = pd.read_csv('requirment.csv', encoding='latin1')\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'[^\\w\\s]', '', text)\n",
    "    text is re.sub(r'\\d+', '', text)\n",
    "    tokens = text.split()\n",
    "    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n",
    "    return ' '.join(tokens)\n",
    "\n",
    "df['Base_Reviews'] = df['Base_Reviews'].apply(clean_text)\n",
    "\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(df['Base_Reviews'])\n",
    "X = tokenizer.texts_to_sequences(df['Base_Reviews'])\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "maxlen = 100\n",
    "X = pad_sequences(X, padding='post', maxlen=maxlen)\n",
    "\n",
    "y_dict = {'feature': 0, 'user_experience': 1, 'issue': 2, 'other_information': 3}\n",
    "y = pd.get_dummies(df['category']).values\n",
    "\n",
    "# 2. Oversample to balance classes\n",
    "oversampler = RandomOverSampler(random_state=42)\n",
    "X_resampled, y_resampled = oversampler.fit_resample(X, y)\n",
    "\n",
    "# 3. Define the CNN model\n",
    "def create_model():\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=vocab_size, output_dim=100, input_length=maxlen))\n",
    "    model.add(Conv1D(128, 5, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=2))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Dense(len(y_dict), activation='softmax'))\n",
    "    model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "# 4. K-Fold Cross-Validation\n",
    "n_folds = 10\n",
    "kfold = KFold(n_splits=n_folds, shuffle=True)\n",
    "fold_no = 1\n",
    "acc_per_fold = []\n",
    "avg_train_loss = []\n",
    "avg_val_loss = []\n",
    "\n",
    "for train, test in kfold.split(X_resampled, y_resampled):\n",
    "    model = create_model()\n",
    "    history = model.fit(X_resampled[train], y_resampled[train], validation_split=0.1, epochs=10, batch_size=32, verbose=0)\n",
    "    \n",
    "    avg_train_loss.append(history.history['loss'])\n",
    "    avg_val_loss.append(history.history['val_loss'])\n",
    "\n",
    "    scores = model.evaluate(X_resampled[test], y_resampled[test], verbose=0)\n",
    "    acc_per_fold.append(scores[1] * 100)\n",
    "    fold_no += 1\n",
    "\n",
    "# 5. Plot Training and Validation Loss\n",
    "plt.figure()\n",
    "plt.plot(np.mean(avg_train_loss, axis=0), label='Average Training Loss')\n",
    "plt.plot(np.mean(avg_val_loss, axis=0), label='Average Validation Loss')\n",
    "plt.title('Average Training and Validation Loss across 10 folds')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.savefig('training_validation_loss.png', dpi=300)\n",
    "plt.close()\n",
    "\n",
    "# Confusion Matrix\n",
    "y_pred = model.predict(X_resampled)\n",
    "y_pred_classes = np.argmax(y_pred, axis=1)\n",
    "y_true_classes = np.argmax(y_resampled, axis=1)\n",
    "cm = confusion_matrix(y_true_classes, y_pred_classes)\n",
    "plt.figure()\n",
    "sns.heatmap(cm, annot=True, fmt='g')\n",
    "plt.savefig('confusion_matrix.png', dpi=300)\n",
    "plt.close()\n",
    "\n",
    "# Classification Report\n",
    "print(classification_report(y_true_classes, y_pred_classes, target_names=list(y_dict.keys())))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d7e8d549-5fa0-47b1-9853-7da4973fa6c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.11/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#CNN Model undersampling  ..........\n",
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from imblearn.under_sampling import RandomUnderSampler  # Import RandomUnderSampler for undersampling\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, Flatten, Dropout, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "\n",
    "# 1. Load and Preprocess the dataset\n",
    "df = pd.read_csv('requirment.csv', encoding='latin1')\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'[^\\w\\s]', '', text)\n",
    "    text = re.sub(r'\\d+', '', text)\n",
    "    tokens = text.split()\n",
    "    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n",
    "    return ' '.join(tokens)\n",
    "\n",
    "df['Base_Reviews'] = df['Base_Reviews'].apply(clean_text)\n",
    "\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(df['Base_Reviews'])\n",
    "X = tokenizer.texts_to_sequences(df['Base_Reviews'])\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "maxlen = 100\n",
    "X = pad_sequences(X, padding='post', maxlen=maxlen)\n",
    "\n",
    "y_dict = {'feature': 0, 'user_experience': 1, 'issue': 2, 'other_information': 3}\n",
    "y = df['category'].map(y_dict)\n",
    "y = pd.get_dummies(df['category']).values\n",
    "\n",
    "# 2. Undersample to balance classes\n",
    "undersampler = RandomUnderSampler(random_state=42)  # Use RandomUnderSampler for undersampling\n",
    "X_resampled, y_resampled = undersampler.fit_resample(X, y)\n",
    "\n",
    "# Rest of the code remains the same\n",
    "# Define the CNN model, K-Fold Cross-Validation, and Performance Metrics\n",
    "# ...\n",
    "\n",
    "# 3. Define the CNN model\n",
    "def create_model():\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=vocab_size, output_dim=100, input_length=maxlen))\n",
    "    model.add(Conv1D(128, 5, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=2))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Dense(4, activation='softmax'))\n",
    "    model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "# 4. K-Fold Cross-Validation\n",
    "n_folds = 10\n",
    "kfold = KFold(n_splits=n_folds, shuffle=True)\n",
    "fold_no = 1\n",
    "acc_per_fold = []\n",
    "\n",
    "# Lists to store average accuracies across folds\n",
    "avg_train_acc = []\n",
    "avg_val_acc = []\n",
    "\n",
    "for train, test in kfold.split(X_resampled, y_resampled):\n",
    "    model = create_model()\n",
    "    history = model.fit(X_resampled[train], y_resampled[train], validation_split=0.1, epochs=10, batch_size=32, verbose=0)\n",
    "    \n",
    "    avg_train_acc.append(history.history['accuracy'])\n",
    "    avg_val_acc.append(history.history['val_accuracy'])\n",
    "\n",
    "    scores = model.evaluate(X_resampled[test], y_resampled[test], verbose=0)\n",
    "    acc_per_fold.append(scores[1] * 100)\n",
    "    fold_no += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e3aa3756-6bd9-472b-b6bc-47a49dcae410",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> Average Accuracy across 10-folds: 69.03% (+/- 1.94%)\n"
     ]
    }
   ],
   "source": [
    "# 5. Performance Metrics\n",
    "print(f'> Average Accuracy across {n_folds}-folds: {np.mean(acc_per_fold):.2f}% (+/- {np.std(acc_per_fold):.2f}%)')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ce3dc78d-962e-40ef-8a5d-508ea4b0a58c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Average Training and Validation Accuracy for 5 folds\n",
    "plt.plot(np.mean(avg_train_acc, axis=0), label='Average Training Accuracy')\n",
    "plt.plot(np.mean(avg_val_acc, axis=0), label='Average Validation Accuracy')\n",
    "plt.title('Average Training and Validation Accuracy across 10 folds')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "11eda17e-930a-4698-8261-ca4c98ebef0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   precision    recall  f1-score   support\n",
      "\n",
      "          feature       0.99      1.00      0.99      8359\n",
      "  user_experience       0.97      0.98      0.98      8359\n",
      "            issue       0.98      0.98      0.98      8359\n",
      "other_information       0.98      0.96      0.97      8359\n",
      "\n",
      "         accuracy                           0.98     33436\n",
      "        macro avg       0.98      0.98      0.98     33436\n",
      "     weighted avg       0.98      0.98      0.98     33436\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification Report\n",
    "print(classification_report(y_true_classes, y_pred_classes, target_names=list(y_dict.keys())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "07d2d43e-a037-4ced-adc0-1e574315c000",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.11/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n",
      "/opt/anaconda3/lib/python3.11/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1045/1045\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 11ms/step\n",
      "\u001b[1m1045/1045\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 10ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, Flatten, Dropout, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "# Load and preprocess the dataset\n",
    "df = pd.read_csv('requirment.csv', encoding='latin1')\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'[^\\w\\s]', '', text)\n",
    "    text = re.sub(r'\\d+', '', text)\n",
    "    tokens = text.split()\n",
    "    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n",
    "    return ' '.join(tokens)\n",
    "\n",
    "df['Base_Reviews'] = df['Base_Reviews'].apply(clean_text)\n",
    "\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(df['Base_Reviews'])\n",
    "\n",
    "X = tokenizer.texts_to_sequences(df['Base_Reviews'])\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "maxlen = 100\n",
    "X = pad_sequences(X, padding='post', maxlen=maxlen)\n",
    "\n",
    "# Define class labels, oversampling, and undersampling\n",
    "y_dict = {'feature': 0, 'user_experience': 1, 'issue': 2, 'other_information': 3}\n",
    "y = df['category'].map(y_dict)\n",
    "y = pd.get_dummies(df['category']).values\n",
    "\n",
    "oversampler = RandomOverSampler(random_state=42)\n",
    "undersampler = RandomUnderSampler(random_state=42)\n",
    "\n",
    "# Define the CNN model\n",
    "def create_model():\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=vocab_size, output_dim=100, input_length=maxlen))\n",
    "    model.add(Conv1D(128, 5, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=2))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Dense(4, activation='softmax'))\n",
    "    model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "# Train and evaluate the model for oversampling\n",
    "X_oversampled, y_oversampled = oversampler.fit_resample(X, y)\n",
    "model_oversampling = create_model()\n",
    "model_oversampling.fit(X_oversampled, y_oversampled, epochs=10, batch_size=32, verbose=0)\n",
    "\n",
    "# Train and evaluate the model for undersampling\n",
    "X_undersampled, y_undersampled = undersampler.fit_resample(X, y)\n",
    "model_undersampling = create_model()\n",
    "model_undersampling.fit(X_undersampled, y_undersampled, epochs=10, batch_size=32, verbose=0)\n",
    "\n",
    "# Function to plot ROC curve and calculate AUC\n",
    "def plot_roc_auc(models, X, y, titles):\n",
    "    plt.figure()\n",
    "    for model, title in zip(models, titles):\n",
    "        y_pred = model.predict(X)\n",
    "        fpr, tpr, thresholds = roc_curve(y, y_pred[:, 1])\n",
    "        roc_auc = auc(fpr, tpr)\n",
    "        plt.plot(fpr, tpr, lw=2, label=f'{title} (area = {roc_auc:.2f})')\n",
    "\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('ROC Curve for Sampling Methods (CNN)')\n",
    "    plt.legend(loc='lower right')\n",
    "    plt.show()\n",
    "\n",
    "# Plot both ROC curves on the same diagram\n",
    "plot_roc_auc([model_oversampling, model_undersampling], X_oversampled, y_oversampled[:, 1], titles=['Oversampling', 'Undersampling'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4f0fd8e7-a7bb-44d0-a450-1fa582f2aae1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to plot ROC curve and calculate AUC\n",
    "def plot_roc_auc(models, X, y, titles):\n",
    "    plt.figure()\n",
    "    for model, title in zip(models, titles):\n",
    "        y_pred = model.predict(X)\n",
    "        fpr, tpr, thresholds = roc_curve(y, y_pred[:, 1])\n",
    "        roc_auc = auc(fpr, tpr)\n",
    "        plt.plot(fpr, tpr, lw=2, label=f'{title} (area = {roc_auc:.2f})')\n",
    "\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('ROC Curve for Sampling Methods (CNN)')\n",
    "    plt.legend(loc='lower right')\n",
    "    plt.savefig('ROC Curve for Sampling Methods (CNN).png', dpi=300)\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "521e4dab-945d-4e83-8b0b-ebd6b71a381c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "302a6429-fa02-40d3-9bc9-0e46a7929f83",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.11/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> Average Accuracy across 10-folds: 95.00% (+/- 0.52%)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, Flatten, Dropout, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "# 1. Load and Preprocess the dataset\n",
    "df = pd.read_csv('requirment.csv', encoding='latin1')\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'[^\\w\\s]', '', text)\n",
    "    text = re.sub(r'\\d+', '', text)\n",
    "    tokens = text.split()\n",
    "    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n",
    "    return ' '.join(tokens)\n",
    "\n",
    "df['Base_Reviews'] = df['Base_Reviews'].apply(clean_text)\n",
    "\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(df['Base_Reviews'])\n",
    "X = tokenizer.texts_to_sequences(df['Base_Reviews'])\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "maxlen = 100\n",
    "X = pad_sequences(X, padding='post', maxlen=maxlen)\n",
    "\n",
    "y_dict = {'feature': 0, 'user_experience': 1, 'issue': 2, 'other_information': 3}\n",
    "y = df['category'].map(y_dict)\n",
    "y = pd.get_dummies(df['category']).values\n",
    "\n",
    "# 2. Oversample to balance classes\n",
    "oversampler = RandomOverSampler(random_state=42)\n",
    "X_resampled, y_resampled = oversampler.fit_resample(X, y)\n",
    "\n",
    "# 3. Define the CNN model\n",
    "def create_model():\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=vocab_size, output_dim=100, input_length=maxlen))\n",
    "    model.add(Conv1D(128, 5, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=2))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Dense(4, activation='softmax'))\n",
    "    model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "# 4. K-Fold Cross-Validation\n",
    "n_folds = 10\n",
    "kfold = KFold(n_splits=n_folds, shuffle=True)\n",
    "fold_no = 1\n",
    "acc_per_fold = []\n",
    "\n",
    "# Lists to store average accuracies across folds\n",
    "avg_train_acc = []\n",
    "avg_val_acc = []\n",
    "\n",
    "for train, test in kfold.split(X_resampled, y_resampled):\n",
    "    model = create_model()\n",
    "    history = model.fit(X_resampled[train], y_resampled[train], validation_split=0.1, epochs=10, batch_size=32, verbose=0)\n",
    "    \n",
    "    avg_train_acc.append(history.history['accuracy'])\n",
    "    avg_val_acc.append(history.history['val_accuracy'])\n",
    "\n",
    "    scores = model.evaluate(X_resampled[test], y_resampled[test], verbose=0)\n",
    "    acc_per_fold.append(scores[1] * 100)\n",
    "    fold_no += 1\n",
    "\n",
    "\n",
    "# 5. Performance Metrics\n",
    "print(f'> Average Accuracy across {n_folds}-folds: {np.mean(acc_per_fold):.2f}% (+/- {np.std(acc_per_fold):.2f}%)')\n",
    "\n",
    "# Average Training and Validation Accuracy for 5 folds\n",
    "plt.plot(np.mean(avg_train_acc, axis=0), label='Average Training Accuracy')\n",
    "plt.plot(np.mean(avg_val_acc, axis=0), label='Average Validation Accuracy')\n",
    "plt.title('Average Training and Validation Accuracy across 10 folds')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2dfbaaae-c84d-432e-bb2d-ef02d03984c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Confusion Matrix\n",
    "#y_pred = model.predict(X_resampled)\n",
    "#y_pred_classes = np.argmax(y_pred, axis=1)\n",
    "#y_true_classes = np.argmax(y_resampled, axis=1)\n",
    "#cm = confusion_matrix(y_true_classes, y_pred_classes)\n",
    "#sns.heatmap(cm, annot=True, fmt='g')\n",
    "#plt.show()\n",
    "\n",
    "# ROC Curve\n",
    "#n_classes = len(y_dict)\n",
    "#fpr = dict()\n",
    "#tpr = dict()\n",
    "#roc_auc = dict()\n",
    "#for i in range(n_classes):\n",
    "  #  fpr[i], tpr[i], _ = roc_curve(y_resampled[:, i], y_pred[:, i])\n",
    "   # roc_auc[i] = auc(fpr[i], tpr[i])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "abbc8f67-6ec2-42a3-a95d-4e425a403738",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot ROC curve for each class\n",
    "#plt.figure(figsize=(10, 8))\n",
    "#colors = ['aqua', 'darkorange', 'cornflowerblue', 'red', 'green', 'blue', 'purple', 'pink']\n",
    "#for i in range(n_classes):\n",
    "  # plt.plot(fpr[i], tpr[i], color=colors[i], lw=2, label=f'ROC curve for {list(y_dict.keys())[i]} (area = {roc_auc[i]:.2f})')\n",
    "\n",
    "    \n",
    "#plt.plot([0, 1], [0, 1], 'k--', lw=2)\n",
    "#plt.xlim([0.0, 1.0])\n",
    "#plt.ylim([0.0, 1.05])\n",
    "#plt.xlabel('False Positive Rate')\n",
    "#plt.ylabel('True Positive Rate')\n",
    "#plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "#plt.legend(loc='best')\n",
    "#plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "b40465cf-59fc-4725-8f0e-6abbb004ee60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   precision    recall  f1-score   support\n",
      "\n",
      "          feature       0.99      1.00      0.99      8359\n",
      "  user_experience       0.97      0.98      0.98      8359\n",
      "            issue       0.98      0.98      0.98      8359\n",
      "other_information       0.98      0.96      0.97      8359\n",
      "\n",
      "         accuracy                           0.98     33436\n",
      "        macro avg       0.98      0.98      0.98     33436\n",
      "     weighted avg       0.98      0.98      0.98     33436\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification Report\n",
    "print(classification_report(y_true_classes, y_pred_classes, target_names=list(y_dict.keys())))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
